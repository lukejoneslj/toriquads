# -*- coding: utf-8 -*-
"""QuadsDashboard

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1deMeprT-igwh8noRxsS9Z79hXvLJb29J

#Import Data
"""

# Import necessary libraries
from google.colab import files
import pandas as pd
import numpy as np

# Step 1: Upload the file using Google Colab's upload widget
uploaded = files.upload()

# Step 2: Extract the filename from the uploaded dictionary
file_path = list(uploaded.keys())[0]

# Step 3: Load the uploaded Excel or CSV file
if file_path.endswith('.xlsx'):
    # Load Excel file (assuming the sheet name is 'Overall Quad')
    sheet_name = 'Overall Quad'
    data = pd.read_excel(file_path, sheet_name=sheet_name)
elif file_path.endswith('.csv'):
    # Load CSV file
    data = pd.read_csv(file_path)
else:
    raise ValueError("Unsupported file type. Please upload an Excel (.xlsx) or CSV file.")

"""# Section 1: 80/20 Count

"""

import pandas as pd

def extract_calculations_from_dataframe(df):
    # Define the calculated values and format them correctly for display purposes
    values = {
        "80 Customer Count": f"{int(round(df.iloc[5, 1]))}",  # B6 as whole number, no decimals
        "% of Total Customers": f"{round((df.iloc[5, 1] / df.iloc[5, 0]) * 100, 0):.0f}%",  # B6 / A6, formatted as a percentage with no decimals
        "80 Part Count": f"{int(round(df.iloc[4, 1]))}",  # B5 as whole number, no decimals
        "% of Total Parts": f"{round((df.iloc[4, 1] / df.iloc[4, 0]) * 100, 0):.0f}%",  # B5 / A5, formatted as a percentage with no decimals
    }

    # Convert the dictionary to a DataFrame
    countsDF = pd.DataFrame(list(values.items()), columns=["Metric", "Value"])

    return countsDF

# Assuming 'data' is your DataFrame
countsDF = extract_calculations_from_dataframe(data)
countsDF

"""# Section 2: Quad Metrics

"""

import pandas as pd

def extract_values_from_dataframe(df):
    # Define the cells to extract and keep the values as numbers for calculations
    cells_to_extract = {
        "C1": round(df.iloc[0, 2], 2),
        "C2": round(df.iloc[1, 2], 2),
        "C3": round(df.iloc[2, 2], 2),
        "C4": round(df.iloc[3, 2], 2),
        "B1": round(df.iloc[0, 1], 2),
        "B2": round(df.iloc[1, 1], 2),
        "B3": round(df.iloc[2, 1], 2),
        "B4": round(df.iloc[3, 1], 2),
        "K1": round(df.iloc[0, 10], 2),
        "K2": round(df.iloc[1, 10], 2),
        "K3": round(df.iloc[2, 10], 2),
        "K4": round(df.iloc[3, 10], 2),
    }

    # Convert the dictionary to a DataFrame
    extracted_df = pd.DataFrame(list(cells_to_extract.items()), columns=["Cell", "Value"])

    # Create a formatted version for display purposes
    # Add a new column that formats numbers as strings for executive summary
    extracted_df['Formatted Value'] = extracted_df['Value'].apply(
        lambda x: f"{int(x):,}" if x >= 1 else f"{int(x * 100)}%"
    )

    return extracted_df

# Assuming 'data' is your DataFrame
extracted_values_df = extract_values_from_dataframe(data)
print(extracted_values_df)

import pandas as pd

def extract_quad_table_from_dataframe(df):
    # Extract the necessary cell values and calculate CM $
    data = {
        "Quad": [1, 2, 3, 4],
        "Rev%": [
            f"{int(round(df.iloc[0, 2] * 100))}%",  # C1 as a percentage with no decimals
            f"{int(round(df.iloc[1, 2] * 100))}%",  # C2 as a percentage with no decimals
            f"{int(round(df.iloc[2, 2] * 100))}%",  # C3 as a percentage with no decimals
            f"{int(round(df.iloc[3, 2] * 100))}%",  # C4 as a percentage with no decimals
        ],
        "Rev $": [
            f"{int(round(df.iloc[0, 1])):,}",  # B1 rounded to whole number with commas
            f"{int(round(df.iloc[1, 1])):,}",  # B2 rounded to whole number with commas
            f"{int(round(df.iloc[2, 1])):,}",  # B3 rounded to whole number with commas
            f"{int(round(df.iloc[3, 1])):,}",  # B4 rounded to whole number with commas
        ],
        "CM%": [
            f"{int(round(df.iloc[0, 10] * 100))}%",  # K1 as a percentage with no decimals
            f"{int(round(df.iloc[1, 10] * 100))}%",  # K2 as a percentage with no decimals
            f"{int(round(df.iloc[2, 10] * 100))}%",  # K3 as a percentage with no decimals
            f"{int(round(df.iloc[3, 10] * 100))}%",  # K4 as a percentage with no decimals
        ],
        "CM $": [
            f"{int(round(df.iloc[0, 10] * df.iloc[0, 1])):,}",  # K1 * B1, rounded to whole number with commas
            f"{int(round(df.iloc[1, 10] * df.iloc[1, 1])):,}",  # K2 * B2, rounded to whole number with commas
            f"{int(round(df.iloc[2, 10] * df.iloc[2, 1])):,}",  # K3 * B3, rounded to whole number with commas
            f"{int(round(df.iloc[3, 10] * df.iloc[3, 1])):,}",  # K4 * B4, rounded to whole number with commas
        ],
    }

    # Create the DataFrame
    quad_table_df = pd.DataFrame(data)

    return quad_table_df

# Assuming 'data' is your DataFrame
quad_table_df = extract_quad_table_from_dataframe(data)
quad_table_df

"""# Section 3: Customer and Product Quartiles"""

import pandas as pd

def extract_customer_quartiles(df):
    # Extract the necessary cell values
    data = {
        "Customer Quartiles": [1, 2, 3, 4],
        "Rev%": [
            f"{int(round(df.iloc[0, 5] * 100))}%",  # F1 as a percentage with no decimals
            f"{int(round(df.iloc[1, 5] * 100))}%",  # F2 as a percentage with no decimals
            f"{int(round(df.iloc[2, 5] * 100))}%",  # F3 as a percentage with no decimals
            f"{int(round(df.iloc[3, 5] * 100))}%",  # F4 as a percentage with no decimals
        ],
        "Rev $": [
            f"{int(round(df.iloc[0, 4])):,}",  # E1 rounded to whole number with commas
            f"{int(round(df.iloc[1, 4])):,}",  # E2 rounded to whole number with commas
            f"{int(round(df.iloc[2, 4])):,}",  # E3 rounded to whole number with commas
            f"{int(round(df.iloc[3, 4])):,}",  # E4 rounded to whole number with commas
        ],
    }

    # Create the DataFrame
    customer_quartiles_df = pd.DataFrame(data)

    return customer_quartiles_df

# Assuming 'data' is your DataFrame
customer_quartiles_df = extract_customer_quartiles(data)
customer_quartiles_df

import pandas as pd

def extract_product_quartiles(df):
    # Extract the necessary cell values
    data = {
        "Product Quartiles": [1, 2, 3, 4],
        "Rev%": [
            f"{int(round(df.iloc[0, 8] * 100))}%",  # I1 as a percentage with no decimals
            f"{int(round(df.iloc[1, 8] * 100))}%",  # I2 as a percentage with no decimals
            f"{int(round(df.iloc[2, 8] * 100))}%",  # I3 as a percentage with no decimals
            f"{int(round(df.iloc[3, 8] * 100))}%",  # I4 as a percentage with no decimals
        ],
        "Rev $": [
            f"{int(round(df.iloc[0, 7])):,}",  # H1 rounded to whole number with commas
            f"{int(round(df.iloc[1, 7])):,}",  # H2 rounded to whole number with commas
            f"{int(round(df.iloc[2, 7])):,}",  # H3 rounded to whole number with commas
            f"{int(round(df.iloc[3, 7])):,}",  # H4 rounded to whole number with commas
        ],
    }

    # Create the DataFrame
    product_quartiles_df = pd.DataFrame(data)

    return product_quartiles_df

# Assuming 'data' is your DataFrame
product_quartiles_df = extract_product_quartiles(data)
product_quartiles_df

"""# Section 4: Report Output"""

!pip install reportlab

from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer
from reportlab.lib.pagesizes import letter
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from google.colab import files  # To download the file
from IPython.display import display, HTML
import pandas as pd

# Use the data you calculated in your notebook
df_80_counts = countsDF
df_quads = quad_table_df
df_customer_quartiles = customer_quartiles_df
df_product_quartiles = df_product_quartiles

def create_pdf():
    # Setup PDF
    pdf_filename = "Executive_Summary.pdf"
    pdf = SimpleDocTemplate(pdf_filename, pagesize=letter, topMargin=36)  # Reduced top margin to bring header closer to the top
    elements = []
    styles = getSampleStyleSheet()

    # Update styles to use Times New Roman
    styles['Title'].fontName = 'Times-Roman'
    styles['Title'].fontSize = 20  # Slightly smaller title
    styles['Heading2'].fontName = 'Times-Roman'
    styles['Heading2'].fontSize = 14  # Reduced font size to match smaller title

    # Title
    elements.append(Paragraph("Executive Summary Dashboard", styles['Title']))
    elements.append(Spacer(1, 6))  # Reduced spacing after title

    # Add 80/20 Counts and Quad Metrics side by side
    elements.append(Paragraph("80/20 Counts and Quad Metrics", styles['Heading2']))

    # Prepare tables for 80/20 Counts and Quad Metrics side by side
    counts_table_data = [df_80_counts.columns.tolist()] + df_80_counts.values.tolist()
    quads_table_data = [df_quads.columns.tolist()] + df_quads.values.tolist()

    counts_table = Table(counts_table_data)
    quads_table = Table(quads_table_data)

    for table in [counts_table, quads_table]:
        table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.Color(0.9, 0.9, 0.9)),  # Light grey header background
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.black),  # Header text color set to black
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Times-Roman'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),  # Make header bold
            ('FONTSIZE', (0, 0), (-1, -1), 8),  # Smaller font size to match your dashboard style
            ('BOTTOMPADDING', (0, 0), (-1, 0), 6),
            ('BACKGROUND', (0, 1), (-1, -1), colors.Color(0.97, 0.97, 0.97)),  # Light background for rows
            ('GRID', (0, 0), (-1, -1), 0.5, colors.grey),  # Light grey grid to match Dash style
            ('LINEBEFORE', (0, 0), (-1, -1), 0.5, colors.black),
            ('LINEAFTER', (0, 0), (-1, -1), 0.5, colors.black),
        ]))

    # Create a combined table with 80/20 Counts and Quad Metrics side by side
    combined_counts_quads_data = [[counts_table, quads_table]]
    combined_counts_quads_table = Table(combined_counts_quads_data, colWidths=[270, 270], hAlign='LEFT')
    elements.append(combined_counts_quads_table)
    elements.append(Spacer(1, 6))  # Reduced spacing

    # Quartiles Section
    elements.append(Paragraph("Quartiles", styles['Heading2']))

    # Prepare tables for customer and product quartiles side by side
    customer_table_data = [df_customer_quartiles.columns.tolist()] + df_customer_quartiles.values.tolist()
    product_table_data = [df_product_quartiles.columns.tolist()] + df_product_quartiles.values.tolist()

    customer_table = Table(customer_table_data)
    product_table = Table(product_table_data)

    for table in [customer_table, product_table]:
        table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.Color(0.9, 0.9, 0.9)),  # Light grey header background
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.black),  # Header text color set to black
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Times-Roman'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),  # Make header bold
            ('FONTSIZE', (0, 0), (-1, -1), 8),  # Smaller font size to match your dashboard style
            ('BOTTOMPADDING', (0, 0), (-1, 0), 6),
            ('BACKGROUND', (0, 1), (-1, -1), colors.Color(0.97, 0.97, 0.97)),  # Light background for rows
            ('GRID', (0, 0), (-1, -1), 0.5, colors.grey),  # Light grey grid to match Dash style
            ('LINEBEFORE', (0, 0), (-1, -1), 0.5, colors.black),
            ('LINEAFTER', (0, 0), (-1, -1), 0.5, colors.black),
        ]))

    # Create a combined table with customer and product quartiles side by side
    combined_quartiles_data = [[customer_table, product_table]]
    combined_quartiles_table = Table(combined_quartiles_data, colWidths=[270, 270], hAlign='LEFT')
    elements.append(combined_quartiles_table)
    elements.append(Spacer(1, 6))  # Reduced spacing

    # Build PDF
    pdf.build(elements)
    print("PDF created successfully!")

    # Display PDF in Colab
    display(HTML(f"""
        <h3>Download or View the PDF</h3>
        <a href="/content/{pdf_filename}" target="_blank">Click here to view the PDF</a>
    """))

    # Download PDF to local machine
    files.download(pdf_filename)

# Create and display/download the PDF
create_pdf()

